name: Release

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Type of version bump (major, minor, or patch)'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch

permissions:
  contents: write

jobs:
  calculate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.calculate.outputs.version }}
    steps:
      - name: Calculate next version
        id: calculate
        run: |
          # Get the latest release version
          LATEST_VERSION=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | grep -o '"tag_name": "v[0-9]*\.[0-9]*\.[0-9]*"' | cut -d'"' -f4)

          if [ -z "$LATEST_VERSION" ]; then
            # If no releases exist, start with 0.0.0
            LATEST_VERSION="v0.0.0"
          fi

          # Remove 'v' prefix for version calculation
          VERSION=${LATEST_VERSION#v}

          # Split version into major, minor, patch
          IFS='.' read -r -a version_parts <<< "$VERSION"
          MAJOR=${version_parts[0]}
          MINOR=${version_parts[1]}
          PATCH=${version_parts[2]}

          # Increment based on bump type
          case "${{ github.event.inputs.bump_type }}" in
            "major")
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            "minor")
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "patch")
              PATCH=$((PATCH + 1))
              ;;
          esac

          # Construct new version
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new version is $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

  build-and-release:
    needs: calculate-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.20'

      - name: Run tests
        run: go test ./...

      - name: Create git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a v${{ needs.calculate-version.outputs.version }} -m "Release v${{ needs.calculate-version.outputs.version }}"
          git push origin v${{ needs.calculate-version.outputs.version }}
